# -*- coding: utf-8 -*-
"""DataPreprocessingAndModelTraining

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CFE9CBcRjbI83-2z6i69HCDWCFEKc44y
"""

#importing all necessary libraries for Data Preprocessing & Visualization
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import SelectKBest, chi2
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression
from sklearn. tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier

patient_df = pd.read_csv(r"PCOS_extended_dataset.csv")

pd.set_option("display.max_columns", None)
patient_df.head()

patient_df.info()

col_list = patient_df.columns
col_list

patient_df = patient_df.dropna()

patient_df["PCOS (Y/N)"].value_counts()

#since the dataset is a bit unbalance, we delete some records with patients NOT having PCOS to make it balanced
# Filter the dataframe to get only 'PCOS' = 0
df_no = patient_df[patient_df['PCOS (Y/N)'] == 0]

# Randomly select 592 rows to delete to balance the dataset
rows_to_delete = df_no.sample(n=592, random_state=42)

# Drop these rows from the original dataframe
patient_df = patient_df.drop(rows_to_delete.index)

# Now patient_df has a balanced number of 'PCOS  (Y/N)' = 'Y' and 'N' rows

patient_df["II    beta-HCG(mIU/mL)"] = pd.to_numeric(patient_df["II    beta-HCG(mIU/mL)"], errors='coerce')
patient_df["AMH(ng/mL)"] = pd.to_numeric(patient_df["AMH(ng/mL)"], errors='coerce')
patient_df = patient_df.dropna()

patient_df.info()

numeric_df = patient_df[[" Age (yrs)", 'Weight (Kg)',
       'Height(Cm) ', 'BMI', 'Pulse rate(bpm) ',
       'RR (breaths/min)', 'Hb(g/dl)', 'Cycle length(days)',
        '  I   beta-HCG(mIU/mL)', 'II    beta-HCG(mIU/mL)', 'FSH(mIU/mL)',
       'LH(mIU/mL)', 'TSH (mIU/L)', 'AMH(ng/mL)', 'PRL(ng/mL)', 'Vit D3 (ng/mL)',
       'PRG(ng/mL)', 'RBS(mg/dl)', 'BP _Systolic (mmHg)',
       'BP _Diastolic (mmHg)', 'Follicle No. (L)', 'Follicle No. (R)',
       'Avg. F size (L) (mm)', 'Avg. F size (R) (mm)', 'Endometrium (mm)']]
numeric_df.describe()

Q1 = patient_df['Pulse rate(bpm) '].quantile(0.25)
Q3 = patient_df['Pulse rate(bpm) '].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['Pulse rate(bpm) '].median()
patient_df['Pulse rate(bpm) '] = patient_df['Pulse rate(bpm) '].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

Q1 = patient_df['II    beta-HCG(mIU/mL)'].quantile(0.25)
Q3 = patient_df['II    beta-HCG(mIU/mL)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['II    beta-HCG(mIU/mL)'].median()
patient_df['II    beta-HCG(mIU/mL)'] = patient_df['II    beta-HCG(mIU/mL)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

Q1 = patient_df['FSH(mIU/mL)'].quantile(0.25)
Q3 = patient_df['FSH(mIU/mL)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['FSH(mIU/mL)'].median()
patient_df['FSH(mIU/mL)'] = patient_df['FSH(mIU/mL)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of LH Hormones with the median value
Q1 = patient_df['LH(mIU/mL)'].quantile(0.25)
Q3 = patient_df['LH(mIU/mL)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['LH(mIU/mL)'].median()
patient_df['LH(mIU/mL)'] = patient_df['LH(mIU/mL)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of LH Hormones with the median value
Q1 = patient_df['TSH (mIU/L)'].quantile(0.25)
Q3 = patient_df['TSH (mIU/L)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['TSH (mIU/L)'].median()
patient_df['TSH (mIU/L)'] = patient_df['TSH (mIU/L)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of AMH Hormones with the median value
Q1 = patient_df['AMH(ng/mL)'].quantile(0.25)
Q3 = patient_df['AMH(ng/mL)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['AMH(ng/mL)'].median()
patient_df['AMH(ng/mL)'] = patient_df['AMH(ng/mL)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of PRL Hormones with the median value
Q1 = patient_df['PRL(ng/mL)'].quantile(0.25)
Q3 = patient_df['PRL(ng/mL)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['PRL(ng/mL)'].median()
patient_df['PRL(ng/mL)'] = patient_df['PRL(ng/mL)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of PRG Hormones with the median value
Q1 = patient_df['PRG(ng/mL)'].quantile(0.25)
Q3 = patient_df['PRG(ng/mL)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['PRG(ng/mL)'].median()
patient_df['PRG(ng/mL)'] = patient_df['PRG(ng/mL)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of RBS Hormones with the median value
Q1 = patient_df['RBS(mg/dl)'].quantile(0.25)
Q3 = patient_df['RBS(mg/dl)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['RBS(mg/dl)'].median()
patient_df['RBS(mg/dl)'] = patient_df['RBS(mg/dl)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of Systolic Blood Pressure with the median value
Q1 = patient_df['BP _Systolic (mmHg)'].quantile(0.25)
Q3 = patient_df['BP _Systolic (mmHg)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['BP _Systolic (mmHg)'].median()
patient_df['BP _Systolic (mmHg)'] = patient_df['BP _Systolic (mmHg)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

#Replacing outlier values of Diastolic Blood Pressure with the median value
Q1 = patient_df['BP _Diastolic (mmHg)'].quantile(0.25)
Q3 = patient_df['BP _Diastolic (mmHg)'].quantile(0.75)
IQR = Q3 - Q1

# Step 2: Define the bounds for outliers
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Step 3: Replace outliers with the median value
median_value = patient_df['BP _Diastolic (mmHg)'].median()
patient_df['BP _Diastolic (mmHg)'] = patient_df['BP _Diastolic (mmHg)'].apply(lambda x: median_value if x < lower_bound or x > upper_bound else x)

# Blood Group indications
blood_group_mapping = {
    11: 'A+',
    12: 'A-',
    13: 'B+',
    14: 'B-',
    15: 'O+',
    16: 'O-',
    17: 'AB+',
    18: 'AB-'
}


patient_df['PCOS'] = patient_df["PCOS (Y/N)"]
patient = patient_df.drop(["Sl. No", "Patient File No.", "Marraige Status (Yrs)", "  I   beta-HCG(mIU/mL)","PCOS (Y/N)"], axis=1)

x = patient.iloc[:, :-1]
y = patient.iloc[:, -1]

x,y

patient.head()

patient.info()

col_list = list(patient.columns)
col_list

numerical_features = [' Age (yrs)', 'Weight (Kg)','Height(Cm) ', 'BMI','Pulse rate(bpm) ', 'RR (breaths/min)', 'Hb(g/dl)','Cycle length(days)', 'No. of abortions', 'II    beta-HCG(mIU/mL)', 'FSH(mIU/mL)',
                     'LH(mIU/mL)', 'FSH/LH', 'Hip(inch)', 'Waist(inch)', 'Waist:Hip Ratio','TSH (mIU/L)', 'AMH(ng/mL)', 'PRL(ng/mL)', 'Vit D3 (ng/mL)',
                     'PRG(ng/mL)', 'RBS(mg/dl)','BP _Systolic (mmHg)','BP _Diastolic (mmHg)', 'Follicle No. (L)', 'Follicle No. (R)','Avg. F size (L) (mm)', 'Avg. F size (R) (mm)', 'Endometrium (mm)']

categorical_features = ['Blood Group','Cycle(R/I)', 'Pregnant(Y/N)', 'Weight gain(Y/N)', 'hair growth(Y/N)','Skin darkening (Y/N)', 'Hair loss(Y/N)', 'Pimples(Y/N)','Fast food (Y/N)', 'Reg.Exercise(Y/N)']

col = numerical_features + numerical_features

scaler = StandardScaler()
x_scaled_numerical = scaler.fit_transform(x[numerical_features])

from sklearn.feature_selection import SelectKBest, chi2, f_classif

f_selector = SelectKBest(f_classif, k=15)
X_numerical_selected = f_selector.fit_transform(x[numerical_features], y)


# Example for categorical features using Chi2
chi2_selector = SelectKBest(chi2, k= 'all')
X_categorical_selected = chi2_selector.fit_transform(x[categorical_features], y)

X_final = np.hstack([X_numerical_selected, X_categorical_selected])
X_final

all_features = col

numerical_selected_names = [all_features[i] for i in f_selector.get_support(indices=True)]
categorical_selected_names = [categorical_features[i] for i in chi2_selector.get_support(indices=True)]

# Combine selected feature names
selected_feature_names = numerical_selected_names + categorical_selected_names

# Create DataFrame with selected features
PCOS_final_df = pd.DataFrame(X_final, columns=selected_feature_names)

# Add target column
PCOS_final_df['PCOS'] = y.values  # Use the actual target column name

PCOS_final_df.head()

csv_filename = 'Final_PCOS_Dataset.csv'
PCOS_final_df.to_csv(csv_filename, index=False)

